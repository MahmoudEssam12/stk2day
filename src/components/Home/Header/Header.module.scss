/// Mixin to place items on a circle
/// @param {Integer} $item-count - Number of items on the circle
/// @param {Length} $circle-size - Large circle size
/// @param {Length} $item-size - Single item size
@mixin on-circle($item-count, $circle-size, $item-size) {
    position: relative;
    width: $circle-size;
    height: $circle-size;
    padding: 0;
    border-radius: 50%;
    list-style: none;

    >* {
        display: block;
        position: absolute;
        top: 50%;
        right: 50%;
        width: $item-size;
        height: $item-size;
        margin: -($item-size / 2);

        $angle: (360 / $item-count);
        $rot: 0;

        @for $i from 1 through $item-count {
            &:nth-of-type(#{$i}) {
                transform:
                    rotate($rot * -1deg) translate($circle-size / 2) rotate($rot * 1deg);
            }

            $rot: $rot+$angle;
        }
    }
}

.header_wrapper {
    display: flex;
    justify-content: center;
    gap: 2rem;
    flex-wrap: wrap;
    align-items: center;
    padding: 2rem 0rem;
    margin: 1rem 0;
    min-height: 100vh;

    .col:first-child {
        max-height: 120px;
        overflow: hidden;
        position: relative;
        width: 50%;
        height: 120px;
    }

    .col {
        width: 100%;
        text-align: center;

        h2 {
            font-size: 6rem;
            position: absolute;
            bottom: 0;
            left: 0;
            transform: translateY(120px);
            // animation-name: change;
            // animation-duration: 20s;
            // animation-iteration-count: infinite;
            // animation-timing-function: cubic-bezier(.77, 0, .18, 1);

            span {
                display: block;
                color: var(--secondary-color);
                margin: 10px 0;
            }
        }

        p {
            color: var(--grey-color);
            margin: 1rem 0;
        }

        a {
            color: #fff;
            background-color: var(--secondary-color);
            padding: 1rem 2rem;
            display: inline-block;
            margin: 1rem 0;
            border-radius: 8px;
            text-decoration: none;
            transition: all .3s ease;

            &:hover {
                background-color: var(--hover-color);
            }
        }

        picture {
            transition: all 3s ease;
            max-width: 350px;
            scale: 1.4;
            rotate: 45deg;
            filter: blur(4px);
            // animation-name: change;
            // animation-duration: 20s;
            // animation-iteration-count: infinite;
            // animation-timing-function: cubic-bezier(.77, 0, .18, 1);


            &.active {
                filter: blur(0);
                rotate: 0;
                scale: 1;
            }
        }

        img {
            max-width: 300px;
        }
    }
}

.col:last-child {
    width: 47%;
    display: flex;
    flex-direction: column;
    // max-height: 50px;
    gap: 5rem;
    overflow: hidden;
    min-height: 100vh;
    // overflow: hidden;
    // @include on-circle($item-count: 8, $circle-size: 20em, $item-size: 6em);
}

@keyframes change {
    0% {
        transform: translate3d(0, 0, 0);

    }

    16% {
        transform: translate3d(0, -100%, 0);
    }


    33% {
        transform: translate3d(0, -200%, 0);

    }

    50% {
        transform: translate3d(0, -300%, 0);

    }

    66% {
        transform: translate3d(0, -200%, 0);

    }

    83% {
        transform: translate3d(0, -100%, 0);

    }


    100% {
        transform: translate3d(0, 0, 0);

    }
}


//1 to 2
// 2 to 3
// 3 to 4
// 4 to 3
// 3 to 2
// 2 to 1

/*** 
6 is the number of animations

6x + 6y = 100 (100% duration)
6x + 8 = 100
6x = 88
x = 14.6

// y = 2 -> Animation between two lines
// x = 14.6 -> Time spent on a line
**/

@keyframes imageChange {
    0% {
        transform: translate3d(0, 0, 0);

    }

    16% {
        transform: translate3d(0, -100%, 0);

    }


    33% {
        transform: translate3d(0, -200%, 0);

    }

    50% {
        transform: translate3d(0, -300%, 0);

    }

    66% {
        transform: translate3d(0, -200%, 0);

    }

    83% {
        transform: translate3d(0, -100%, 0);

    }


    100% {
        transform: translate3d(0, 0, 0);

    }
}